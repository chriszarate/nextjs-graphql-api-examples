/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ctx from "./schema/context"
import * as prisma from "./node_modules/.prisma/client/index"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PostOrderBy: { // input type
    createdAt?: NexusGenEnums['OrderBy'] | null; // OrderBy
    title?: NexusGenEnums['OrderBy'] | null; // OrderBy
    updatedAt?: NexusGenEnums['OrderBy'] | null; // OrderBy
    votes?: NexusGenEnums['OrderBy'] | null; // OrderBy
  }
  UserOrderBy: { // input type
    createdAt?: NexusGenEnums['OrderBy'] | null; // OrderBy
    firstName?: NexusGenEnums['OrderBy'] | null; // OrderBy
    lastName?: NexusGenEnums['OrderBy'] | null; // OrderBy
    updatedAt?: NexusGenEnums['OrderBy'] | null; // OrderBy
  }
}

export interface NexusGenEnums {
  OrderBy: "asc" | "desc"
}

export interface NexusGenRootTypes {
  Mutation: {};
  Post: prisma.Post;
  Query: {};
  User: prisma.User;
  _QueryMeta: { // root type
    count: number; // Int!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  PostOrderBy: NexusGenInputs['PostOrderBy'];
  UserOrderBy: NexusGenInputs['UserOrderBy'];
  OrderBy: NexusGenEnums['OrderBy'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createPost: NexusGenRootTypes['Post']; // Post!
    votePost: NexusGenRootTypes['Post']; // Post!
  }
  Post: { // field return type
    createdAt: any; // DateTime!
    id: string; // String!
    title: string; // String!
    updatedAt: any; // DateTime!
    url: string; // String!
    votes: number; // Int!
  }
  Query: { // field return type
    _allPostsMeta: NexusGenRootTypes['_QueryMeta']; // _QueryMeta!
    _allUsersMeta: NexusGenRootTypes['_QueryMeta']; // _QueryMeta!
    allPosts: NexusGenRootTypes['Post'][]; // [Post!]!
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    Post: NexusGenRootTypes['Post']; // Post!
    User: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    createdAt: any; // DateTime!
    email: string; // String!
    firstName: string; // String!
    id: string; // String!
    lastName: string; // String!
    updatedAt: any; // DateTime!
  }
  _QueryMeta: { // field return type
    count: number; // Int!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPost: { // args
      title: string; // String!
      url: string; // String!
    }
    votePost: { // args
      id: string; // String!
    }
  }
  Query: {
    allPosts: { // args
      first?: number | null; // Int
      orderBy?: NexusGenInputs['PostOrderBy'] | null; // PostOrderBy
      skip?: number | null; // Int
    }
    allUsers: { // args
      first?: number | null; // Int
      orderBy?: NexusGenInputs['UserOrderBy'] | null; // UserOrderBy
      skip?: number | null; // Int
    }
    Post: { // args
      id: string; // String!
    }
    User: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Post" | "Query" | "User" | "_QueryMeta";

export type NexusGenInputNames = "PostOrderBy" | "UserOrderBy";

export type NexusGenEnumNames = "OrderBy";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}